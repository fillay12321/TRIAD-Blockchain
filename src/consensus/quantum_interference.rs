use crate::network::{VirtualNetwork, NetworkConfig, NetworkTopology};
use crate::consensus::comparisons::{simulate_pow_consensus, simulate_pos_consensus, ConsensusComparisonResults};
use crate::quantum::QuantumField;
use crate::quantum::quantum_field::QuantumInterference;
use std::fs::File;
use std::io::Write;
use std::time::Instant;
use serde::{Serialize, Deserialize};
use rand::Rng;

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InterferenceAnalysisResults {
    /// –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤, –¥–æ—Å—Ç–∏–≥–∞—é—â–∏—Ö –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    pub avg_node_count: f64,
    
    /// –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    pub consensus_success_rate: f64,
    
    /// –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    pub avg_interference_strength: f64,
    
    /// –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    pub avg_consensus_probability: f64,
    
    /// –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏
    pub avg_entanglement_level: f64,
    
    /// –û—Ç–Ω–æ—à–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞ –∫ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–∞–º (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
    pub efficiency_ratio: f64,
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ TRIAD –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏
pub fn demonstrate_quantum_consensus() -> ConsensusComparisonResults {
    println!("\nüî¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ TRIAD...");
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–µ—Ç–∏
    let node_counts = vec![5, 10, 20, 50, 100];
    let tx_count = 100; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let mut quantum_times = Vec::new();
    let mut pow_times = Vec::new();
    let mut pos_times = Vec::new();
    let mut quantum_entanglement = Vec::new();
    let mut pow_energy = Vec::new();
    let mut pow_propagation = Vec::new();
    let mut pow_real_time = Vec::new();
    
    println!("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–∑–ª–æ–≤...");
    
    for &node_count in &node_counts {
        println!("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ —Å {} —É–∑–ª–∞–º–∏:", node_count);
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∏ TRIAD —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        let config = NetworkConfig {
            network_delay_ms: 5,
            packet_loss_probability: 0.01,
            topology: NetworkTopology::FullMesh,
            use_quantum_field: true,
        };
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–µ—Ç—å
        let mut network = VirtualNetwork::with_nodes(node_count, 3, config);
        
        // –í—Ä–µ–º—è –¥–ª—è TRIAD –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        let start = Instant::now();
        let mut entanglement_sum = 0.0;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        for i in 0..tx_count {
            let tx_data = format!("tx_{}_data_{}", i, rand::random::<u64>());
            let result = network.process_transaction(&tx_data);
            entanglement_sum += result.entanglement_level;
        }
        
        let triad_time = start.elapsed().as_secs_f64();
        let avg_entanglement = entanglement_sum / tx_count as f64;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        quantum_times.push(triad_time);
        quantum_entanglement.push(avg_entanglement);
        
        // –í—Ä–µ–º—è –¥–ª—è PoW –∏ PoS
        let mut _rng = rand::thread_rng();
        let difficulty = 16 + (node_count as f64 / 50.0).floor() as u32;
        let (pow_time, energy, propagation, real_time) = simulate_pow_consensus(node_count, difficulty);
        pow_times.push(pow_time);
        pow_energy.push(energy);
        pow_propagation.push(propagation);
        pow_real_time.push(real_time);
        
        let pos_time = simulate_pos_consensus(node_count);
        pos_times.push(pos_time);
        
        println!("   ‚öõÔ∏è TRIAD: {:.2} —Å–µ–∫ (—É—Ä–æ–≤–µ–Ω—å –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏: {:.2})", triad_time, avg_entanglement);
        println!("   ‚õèÔ∏è PoW: {:.2} —Å–µ–∫", pow_time);
        println!("   üí∞ PoS: {:.2} —Å–µ–∫", pos_time);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let result = ConsensusComparisonResults {
        node_counts: node_counts.clone(),
        quantum_times,
        pow_times,
        pos_times,
        pow_energy_consumption: pow_energy,
        pow_block_propagation_time: pow_propagation,
        pow_real_life_estimation: pow_real_time,
        quantum_entanglement,
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
    let json = serde_json::to_string_pretty(&result).unwrap();
    if let Ok(mut file) = File::create("consensus_comparison.json") {
        let _ = file.write_all(json.as_bytes());
        println!("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ consensus_comparison.json");
    } else {
        println!("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª");
    }
    
    println!("\nüìà –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞:");
    println!("   ‚öõÔ∏è TRIAD: –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∏");
    println!("   ‚õèÔ∏è PoW: –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∏");
    println!("   üí∞ PoS: –õ–∏–Ω–µ–π–Ω—ã–π —Ä–æ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∏");
    println!("\nüî¨ –£—Ä–æ–≤–µ–Ω—å –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏ TRIAD –æ—Å—Ç–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º –¥–∞–∂–µ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å–µ—Ç–∏");
    
    result
}

/// –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
pub fn quantum_interference_consensus(field: &mut QuantumField, tx_data: &str) -> QuantumInterference {
    // –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞
    use sha2::{Sha256, Digest};
    let mut hasher = Sha256::new();
    hasher.update(tx_data.as_bytes());
    let tx_hash = hasher.finalize();
    
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É–∑–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞
    let start_node = (tx_hash[0] as usize) % field.node_count();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    let interference = field.process_transaction(start_node, tx_data);
    
    interference
}

/// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
pub fn analyze_interference_results(results: &[QuantumInterference]) -> InterferenceAnalysisResults {
    if results.is_empty() {
        return InterferenceAnalysisResults {
            avg_node_count: 0.0,
            consensus_success_rate: 0.0,
            avg_interference_strength: 0.0,
            avg_consensus_probability: 0.0,
            avg_entanglement_level: 0.0,
            efficiency_ratio: 0.0,
        };
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    let avg_node_count = results.iter()
        .map(|r| r.nodes.len() as f64)
        .sum::<f64>() / results.len() as f64;
    
    let consensus_success_count = results.iter()
        .filter(|r| r.consensus_reached)
        .count();
    let consensus_success_rate = (consensus_success_count as f64) / (results.len() as f64);
    
    let avg_interference_strength = results.iter()
        .map(|r| f64::abs(r.pattern.strength()))
        .sum::<f64>() / results.len() as f64;
    
    let avg_consensus_probability = results.iter()
        .map(|r| r.consensus_probability)
        .sum::<f64>() / results.len() as f64;
    
    // –°—á–∏—Ç–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∫ —Å—Ä–µ–¥–Ω—é—é —Ñ–∞–∑—É –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    let avg_entanglement_level = results.iter()
        .map(|r| f64::abs(r.pattern.phase()) / std::f64::consts::PI)  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
        .sum::<f64>() / results.len() as f64;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞ –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–∑–ª–æ–≤
    let efficiency_ratio = if avg_node_count > 0.0 {
        consensus_success_rate / avg_node_count
    } else {
        0.0
    };
    
    InterferenceAnalysisResults {
        avg_node_count,
        consensus_success_rate,
        avg_interference_strength,
        avg_consensus_probability,
        avg_entanglement_level,
        efficiency_ratio,
    }
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –∫–≤–∞–Ω—Ç–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
pub fn test_quantum_interference(node_count: usize, tx_count: usize) -> InterferenceAnalysisResults {
    // –°–æ–∑–¥–∞–µ–º –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    let mut field = QuantumField::new(node_count, 3); // 3 –∫—É–±–∏—Ç–∞ –Ω–∞ —É–∑–µ–ª
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    let mut interference_results = Vec::with_capacity(tx_count);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for i in 0..tx_count {
        let tx_data = format!("tx_{}_data_{}", i, rand::random::<u64>());
        let interference = quantum_interference_consensus(&mut field, &tx_data);
        interference_results.push(interference);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyze_interference_results(&interference_results)
} 