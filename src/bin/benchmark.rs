// –ë–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏ TRIAD
//
// –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è:
// 1. –ò–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏ (TPS, –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
// 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
// 3. –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö

use std::time::{Duration, Instant};
use std::collections::HashMap;
use std::io::{self, Write};
use std::fs::File;
use std::thread;

use triad::network::{VirtualNetwork, NetworkConfig, NetworkTopology, ConsensusResult};
use triad::consensus::demonstrate_quantum_consensus;
use triad::quantum::quantum_field::QuantumInterference;
use triad::quantum::triadvantum::state::QuantumState;
use serde::{Serialize, Deserialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
struct BenchmarkResult {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
    node_count: usize,
    qubits_per_node: usize,
    transaction_count: usize,
    topology: String,
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    total_time_ms: f64,
    transactions_per_second: f64,
    avg_latency_ms: f64,
    max_latency_ms: f64,
    
    // –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_entanglement: f64,
    avg_interference: f64,
    consensus_rate: f64,
    
    // –†–µ—Å—É—Ä—Å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    memory_usage_mb: f64,
    relative_energy_consumption: f64,
    estimated_large_scale_tps: f64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
struct NetworkSnapshot {
    timestamp: u64,
    active_nodes: usize,
    consensus_groups: usize,
    total_transactions: usize,
    transaction_queue: usize,
    quantum_field_state: String,
    node_states: HashMap<String, String>,
}

fn main() {
    println!("TRIAD Network Benchmark & Monitoring Suite");
    println!("==========================================");
    
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let args: Vec<String> = std::env::args().collect();
    let benchmark_type = if args.len() > 1 { &args[1] } else { "all" };
    
    match benchmark_type {
        "performance" => benchmark_performance(),
        "monitoring" => run_network_monitoring(),
        "scalability" => test_network_scalability(),
        "stress" => run_stress_test(),
        "latency" => measure_network_latency(),
        "consensus" => benchmark_consensus_mechanisms(),
        "all" => run_all_benchmarks(),
        _ => {
            println!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–∞: {}", benchmark_type);
            println!("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: performance, monitoring, scalability, stress, latency, consensus, all");
        }
    }
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
fn run_all_benchmarks() {
    println!("\nüî¨ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤\n");
    
    println!("1. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    benchmark_performance();
    
    println!("\n2. –¢–µ—Å—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏");
    test_network_scalability();
    
    println!("\n3. –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏");
    measure_network_latency();
    
    println!("\n4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞");
    benchmark_consensus_mechanisms();
    
    // –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º, —Ç.–∫. –æ–Ω –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    println!("\n5. –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å–µ—Ç–∏");
    run_stress_test();
    
    println!("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–∑–ª–æ–≤
fn benchmark_performance() {
    println!("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏ TRIAD");
    
    // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤
    let node_counts = vec![2, 3, 5]; // –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º—ã—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å–µ—Ç–µ–π
    let qubits_per_node = 2; // —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏—Ç–æ–≤ –Ω–∞ —É–∑–µ–ª
    let tx_count = 10; // —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
    
    let mut results = Vec::new();
    
    for &node_count in &node_counts {
        println!("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ —Å {} —É–∑–ª–∞–º–∏...", node_count);
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å —Å –Ω—É–∂–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        println!("–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏...");
        let config = NetworkConfig {
            network_delay_ms: 5,
            packet_loss_probability: 0.01,
            topology: NetworkTopology::FullMesh,
            use_quantum_field: true,
        };
        
        let mut network = VirtualNetwork::with_nodes(node_count, qubits_per_node, config);
        println!("–ê–∫—Ç–∏–≤–∞—Ü–∏—è TriadVantum...");
        network.activate_triadvantum(true);
        
        // –ü—Ä–æ–≥—Ä–µ–≤ —Å–µ—Ç–∏
        println!("–ü—Ä–æ–≥—Ä–µ–≤ —Å–µ—Ç–∏...");
        for i in 0..5 {
            println!("  –ü—Ä–æ–≥—Ä–µ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {}/5", i+1);
            let tx_data = format!("warmup_tx_{}", i);
            let _ = network.process_transaction(&tx_data);
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        println!("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ –¥–∞–Ω–Ω—ã—Ö...");
        let mut latencies = Vec::with_capacity(tx_count);
        let mut entanglement_values = Vec::with_capacity(tx_count);
        let mut interference_values = Vec::with_capacity(tx_count);
        let mut consensus_count = 0;
        
        println!("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...", tx_count);
        let start = Instant::now();
        
        for i in 0..tx_count {
            let tx_start = Instant::now();
            let tx_data = format!("tx_{}", i);
            
            println!("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {}/{}...", i+1, tx_count);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            let result = std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
                let timeout = Duration::from_secs(5); // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
                println!("  –í—ã–∑–æ–≤ process_transaction...");
                let tx_result = network.process_transaction(&tx_data);
                println!("  process_transaction –∑–∞–≤–µ—Ä—à–µ–Ω.");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                if tx_start.elapsed() > timeout {
                    println!("\r‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º", i);
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    ConsensusResult {
                        consensus: false,
                        interference_result: 0.0,
                        processing_time_ms: timeout.as_millis() as f64,
                        consensus_nodes: 0,
                        node_count: node_count,
                        entanglement_level: 0.0,
                    }
                } else {
                    tx_result
                }
            })).unwrap_or_else(|_| {
                // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–∞–Ω–∏–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                println!("\r‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {}", i);
                ConsensusResult {
                    consensus: false,
                    interference_result: 0.0,
                    processing_time_ms: 5000.0,
                    consensus_nodes: 0,
                    node_count: node_count,
                    entanglement_level: 0.0,
                }
            });
            
            println!("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞ {:.2} –º—Å", i+1, tx_start.elapsed().as_secs_f64() * 1000.0);
            
            let tx_latency = tx_start.elapsed().as_secs_f64() * 1000.0;
            latencies.push(tx_latency);
            entanglement_values.push(result.entanglement_level);
            interference_values.push(result.interference_result);
            
            if result.consensus {
                consensus_count += 1;
            }
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∫–∞–∂–¥—ã–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            if (i + 1) % 10 == 0 || i + 1 == tx_count {
                print!("\r–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}/{} ({:.1}%)", 
                       i + 1, tx_count, (i + 1) as f64 / tx_count as f64 * 100.0);
                io::stdout().flush().unwrap();
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if start.elapsed() > Duration::from_secs(300) { // –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –Ω–∞ –≤–µ—Å—å —Ç–µ—Å—Ç
                println!("\n‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ {} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.", i + 1);
                break;
            }
        }
        
        let elapsed = start.elapsed();
        let total_time_ms = elapsed.as_secs_f64() * 1000.0;
        let tps = if latencies.is_empty() { 0.0 } else { latencies.len() as f64 / (total_time_ms / 1000.0) };
        
        println!("\n–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫...");
        
        // –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        let avg_latency = if latencies.is_empty() { 0.0 } else { latencies.iter().sum::<f64>() / latencies.len() as f64 };
        let max_latency = if latencies.is_empty() { 0.0 } else { latencies.iter().fold(0.0, |max, &val| if val > max { val } else { max }) };
        let avg_entanglement = if entanglement_values.is_empty() { 0.0 } else { entanglement_values.iter().sum::<f64>() / entanglement_values.len() as f64 };
        let avg_interference = if interference_values.is_empty() { 0.0 } else { interference_values.iter().sum::<f64>() / interference_values.len() as f64 };
        let consensus_rate = if latencies.is_empty() { 0.0 } else { consensus_count as f64 / latencies.len() as f64 };
        
        // –†–∞—Å—á–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        let memory_usage = (node_count * qubits_per_node * 16) as f64 / 1024.0; // –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ –ú–ë
        
        // –†–∞—Å—á–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å PoW (–≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞)
        let relative_energy = 0.001 + (node_count as f64 * 0.01);
        
        // –†–∞—Å—á–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Å–µ—Ç–∏ –∏–∑ 100,000 —É–∑–ª–æ–≤
        let estimated_large_scale_tps = tps * (100_000.0 / node_count as f64) * 0.8; // 0.8 - —Ñ–∞–∫—Ç–æ—Ä –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let result = BenchmarkResult {
            node_count,
            qubits_per_node,
            transaction_count: tx_count,
            topology: "FullMesh".to_string(),
            
            total_time_ms,
            transactions_per_second: tps,
            avg_latency_ms: avg_latency,
            max_latency_ms: max_latency,
            
            avg_entanglement,
            avg_interference,
            consensus_rate,
            
            memory_usage_mb: memory_usage,
            relative_energy_consumption: relative_energy,
            estimated_large_scale_tps,
        };
        
        results.push(result.clone());
        
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        println!("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–µ—Ç–∏ —Å {} —É–∑–ª–∞–º–∏:", node_count);
        println!("   ‚Ä¢ TPS: {:.2} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫", tps);
        println!("   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {:.2} –º—Å", avg_latency);
        println!("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {:.2} –º—Å", max_latency);
        println!("   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏: {:.4}", avg_entanglement);
        println!("   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: {:.4}", avg_interference);
        println!("   ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {:.1}%", consensus_rate * 100.0);
        println!("   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ –¥–ª—è —Å–µ—Ç–∏ –∏–∑ 100,000 —É–∑–ª–æ–≤: {:.2} TPS", estimated_large_scale_tps);
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON
    let json = serde_json::to_string_pretty(&results).unwrap();
    if let Ok(mut file) = File::create("benchmark_results.json") {
        let _ = file.write_all(json.as_bytes());
        println!("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ benchmark_results.json");
    } else {
        println!("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª");
    }
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
fn run_network_monitoring() {
    println!("\nüîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏ TRIAD");
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    let node_count = 10;
    let qubits_per_node = 3;
    
    let config = NetworkConfig {
        network_delay_ms: 5,
        packet_loss_probability: 0.01,
        topology: NetworkTopology::FullMesh,
        use_quantum_field: true,
    };
    
    let mut network = VirtualNetwork::with_nodes(node_count, qubits_per_node, config);
    network.activate_triadvantum(true);
    
    println!("–°–µ—Ç—å —Å {} —É–∑–ª–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...", node_count);
    println!("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.");
    
    let monitoring_duration_sec = 60; // 1 –º–∏–Ω—É—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    let snapshot_interval_ms = 500;   // –°–Ω–∏–º–æ–∫ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
    let tx_interval_ms = 2000;        // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    let start_time = Instant::now();
    let mut snapshots = Vec::new();
    let mut tx_counter = 0;
    let mut last_tx_time = Instant::now();
    let mut last_snapshot_time = Instant::now();
    
    // –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    loop {
        let elapsed = start_time.elapsed().as_secs();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if elapsed >= monitoring_duration_sec {
            break;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∂–¥—ã–µ tx_interval_ms
        if last_tx_time.elapsed().as_millis() >= tx_interval_ms as u128 {
            let tx_data = format!("monitor_tx_{}", tx_counter);
            let result = network.process_transaction(&tx_data);
            
            println!("\r‚ö° –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{}: –∫–æ–Ω—Å–µ–Ω—Å—É—Å = {}, –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è = {:.4}    ", 
                    tx_counter, result.consensus, result.interference_result);
            io::stdout().flush().unwrap();
            
            tx_counter += 1;
            last_tx_time = Instant::now();
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏ –∫–∞–∂–¥—ã–µ snapshot_interval_ms
        if last_snapshot_time.elapsed().as_millis() >= snapshot_interval_ms as u128 {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ —Å–µ—Ç–∏
            // –ü–æ–∫–∞ –¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            let snapshot = NetworkSnapshot {
                timestamp: elapsed as u64,
                active_nodes: node_count,
                consensus_groups: 1,
                total_transactions: tx_counter,
                transaction_queue: 0,
                quantum_field_state: "active".to_string(),
                node_states: HashMap::new(),
            };
            
            snapshots.push(snapshot);
            last_snapshot_time = Instant::now();
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å CPU
        thread::sleep(Duration::from_millis(10));
    }
    
    println!("\n\nüïí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±—Ä–∞–Ω–æ {} —Å–Ω–∏–º–∫–æ–≤ –∑–∞ {} —Å–µ–∫—É–Ω–¥.", 
            snapshots.len(), monitoring_duration_sec);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–æ–≤ –≤ JSON
    let json = serde_json::to_string_pretty(&snapshots).unwrap();
    if let Ok(mut file) = File::create("network_monitoring.json") {
        let _ = file.write_all(json.as_bytes());
        println!("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ network_monitoring.json");
    } else {
        println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–∞–π–ª");
    }
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å —Å–µ—Ç–∏ —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–∑–ª–æ–≤
fn test_network_scalability() {
    println!("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏ —Å–µ—Ç–∏ TRIAD");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —É–∑–ª–æ–≤, –Ω–æ –º–µ–Ω—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    let node_counts = vec![5, 10, 20, 50, 100, 200];
    let tx_count = 50;
    let qubits_per_node = 3;
    
    println!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞: {} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –∫–∞–∂–¥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∏", tx_count);
    
    let mut tps_values = Vec::with_capacity(node_counts.len());
    
    for &node_count in &node_counts {
        print!("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∏ —Å {} —É–∑–ª–∞–º–∏... ", node_count);
        io::stdout().flush().unwrap();
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å
        let config = NetworkConfig {
            network_delay_ms: 5,
            packet_loss_probability: 0.01,
            topology: NetworkTopology::FullMesh,
            use_quantum_field: true,
        };
        
        let mut network = VirtualNetwork::with_nodes(node_count, qubits_per_node, config);
        network.activate_triadvantum(true);
        println!("–≥–æ—Ç–æ–≤–æ!");
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∏–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        print!("–ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π... ");
        io::stdout().flush().unwrap();
        
        let start = Instant::now();
        for i in 0..tx_count {
            let tx_data = format!("scalability_tx_{}_{}", node_count, i);
            let _ = network.process_transaction(&tx_data);
        }
        let elapsed = start.elapsed();
        
        let total_time_ms = elapsed.as_secs_f64() * 1000.0;
        let tps = tx_count as f64 / (total_time_ms / 1000.0);
        tps_values.push(tps);
        
        println!("–∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {:.2} —Å–µ–∫. TPS: {:.2}", total_time_ms / 1000.0, tps);
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
    println!("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏:");
    println!("–£–∑–ª–æ–≤\tTPS\t\t–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
    println!("------\t-------\t\t------------");
    
    let base_tps = tps_values[0];
    let base_nodes = node_counts[0] as f64;
    
    for i in 0..node_counts.len() {
        let efficiency = tps_values[i] / base_tps * base_nodes / node_counts[i] as f64;
        println!("{}\t{:.2}\t\t{:.2}%", 
                node_counts[i], tps_values[i], efficiency * 100.0);
    }
    
    println!("\nüî¨ –í—ã–≤–æ–¥:");
    
    let last_efficiency = tps_values.last().unwrap() / base_tps * base_nodes / (*node_counts.last().unwrap() as f64);
    
    if last_efficiency > 0.7 {
        println!("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å! –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ {:.1}% –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å–µ—Ç–∏ –≤ {} —Ä–∞–∑.", 
                last_efficiency * 100.0, node_counts.last().unwrap() / node_counts[0]);
    } else if last_efficiency > 0.4 {
        println!("‚úì –•–æ—Ä–æ—à–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {:.1}% –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å–µ—Ç–∏ –≤ {} —Ä–∞–∑.", 
                last_efficiency * 100.0, node_counts.last().unwrap() / node_counts[0]);
    } else {
        println!("‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–¥–∞–µ—Ç –¥–æ {:.1}% –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å–µ—Ç–∏ –≤ {} —Ä–∞–∑.", 
                last_efficiency * 100.0, node_counts.last().unwrap() / node_counts[0]);
    }
}

/// –ü—Ä–æ–≤–æ–¥–∏—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å–µ—Ç–∏ —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
fn run_stress_test() {
    println!("\n‚ö° –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ —Å–µ—Ç–∏ TRIAD");
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞
    let node_count = 20;
    let qubits_per_node = 3;
    let tx_burst_size = 100;    // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let burst_count = 5;        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤
    
    println!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:");
    println!("‚Ä¢ –£–∑–ª–æ–≤: {}", node_count);
    println!("‚Ä¢ –ö—É–±–∏—Ç–æ–≤ –Ω–∞ —É–∑–µ–ª: {}", qubits_per_node);
    println!("‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ø–∞–∫–µ—Ç–µ: {}", tx_burst_size);
    println!("‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤: {}", burst_count);
    println!("‚Ä¢ –û–±—â–µ–µ —á–∏—Å–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", tx_burst_size * burst_count);
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å
    let config = NetworkConfig {
        network_delay_ms: 5,
        packet_loss_probability: 0.01,
        topology: NetworkTopology::FullMesh,
        use_quantum_field: true,
    };
    
    let mut network = VirtualNetwork::with_nodes(node_count, qubits_per_node, config);
    network.activate_triadvantum(true);
    
    println!("\n–°–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∞. –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞...");
    
    let mut successful_tx = 0;
    let mut failed_tx = 0;
    let mut total_latency = 0.0;
    
    for burst in 0..burst_count {
        println!("\n–ü–∞–∫–µ—Ç {}/{}: –æ—Ç–ø—Ä–∞–≤–∫–∞ {} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...", 
                burst + 1, burst_count, tx_burst_size);
        
        let burst_start = Instant::now();
        
        for i in 0..tx_burst_size {
            let tx_data = format!("stress_tx_b{}_i{}", burst, i);
            let tx_start = Instant::now();
            let result = network.process_transaction(&tx_data);
            let tx_latency = tx_start.elapsed().as_secs_f64() * 1000.0;
            
            total_latency += tx_latency;
            
            if result.consensus {
                successful_tx += 1;
            } else {
                failed_tx += 1;
            }
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if (i + 1) % 10 == 0 || i + 1 == tx_burst_size {
                print!("\r[");
                for _j in 0..(i + 1) * 20 / tx_burst_size {
                    print!("‚ñ†");
                }
                for _j in (i + 1) * 20 / tx_burst_size..20 {
                    print!(" ");
                }
                print!("] {}/{}  ", i + 1, tx_burst_size);
                io::stdout().flush().unwrap();
            }
        }
        
        let burst_time = burst_start.elapsed().as_secs_f64();
        let burst_tps = tx_burst_size as f64 / burst_time;
        
        println!("\n–ü–∞–∫–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {:.2} —Å–µ–∫. TPS: {:.2}", burst_time, burst_tps);
    }
    
    let total_tx = successful_tx + failed_tx;
    let success_rate = successful_tx as f64 / total_tx as f64;
    let avg_latency = total_latency / total_tx as f64;
    
    println!("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:");
    println!("‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {} ({:.1}%)", successful_tx, success_rate * 100.0);
    println!("‚Ä¢ –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {} ({:.1}%)", failed_tx, (1.0 - success_rate) * 100.0);
    println!("‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {:.2} –º—Å", avg_latency);
    
    if success_rate > 0.95 {
        println!("\n‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–µ—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —É—Å–ø–µ—Ö–∞.");
    } else if success_rate > 0.8 {
        println!("\n‚úì –•–æ—Ä–æ—à–æ. –°–µ—Ç—å —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π, –Ω–æ –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.");
    } else {
        println!("\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°–µ—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.");
    }
}

/// –ò–∑–º–µ—Ä—è–µ—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–µ—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
fn measure_network_latency() {
    println!("\n‚è±Ô∏è –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏ TRIAD —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏");
    
    let node_count = 10;
    let qubits_per_node = 3;
    let tx_count = 50;
    let delays = vec![1, 5, 10, 20, 50]; // –º—Å
    
    println!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞:");
    println!("‚Ä¢ –£–∑–ª–æ–≤: {}", node_count);
    println!("‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {}", tx_count);
    
    println!("\n–ó–∞–¥–µ—Ä–∂–∫–∞\t–õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å\tTPS");
    println!("--------\t----------\t---");
    
    for &delay in &delays {
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        let config = NetworkConfig {
            network_delay_ms: delay,
            packet_loss_probability: 0.01,
            topology: NetworkTopology::FullMesh,
            use_quantum_field: true,
        };
        
        let mut network = VirtualNetwork::with_nodes(node_count, qubits_per_node, config);
        network.activate_triadvantum(true);
        
        // –ò–∑–º–µ—Ä—è–µ–º –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ TPS
        let mut latencies = Vec::with_capacity(tx_count);
        
        let start = Instant::now();
        for i in 0..tx_count {
            let tx_start = Instant::now();
            let tx_data = format!("latency_tx_{}_{}", delay, i);
            let _ = network.process_transaction(&tx_data);
            let tx_latency = tx_start.elapsed().as_secs_f64() * 1000.0;
            latencies.push(tx_latency);
        }
        
        let total_time = start.elapsed().as_secs_f64();
        let tps = tx_count as f64 / total_time;
        let avg_latency = latencies.iter().sum::<f64>() / latencies.len() as f64;
        
        println!("{}ms\t\t{:.2}ms\t\t{:.2}", delay, avg_latency, tps);
    }
    
    println!("\nüìù –í—ã–≤–æ–¥—ã:");
    println!("‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä—è–º–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
    println!("‚Ä¢ TPS —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Å —Ä–æ—Å—Ç–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏");
    println!("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: 5-10–º—Å");
}

/// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º—ã –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ TRIAD —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏
fn benchmark_consensus_mechanisms() {
    println!("\nüîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞");
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    let _comparison_results = demonstrate_quantum_consensus();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    println!("\nüìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:");
    println!("‚Ä¢ TRIAD-–∫–æ–Ω—Å–µ–Ω—Å—É—Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –Ω–∞ –±–æ–ª—å—à–∏—Ö —Å–µ—Ç—è—Ö");
    println!("‚Ä¢ –≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ —á–µ–º —É PoW");
    println!("‚Ä¢ –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∏");
} 