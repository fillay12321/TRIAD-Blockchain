use std::error::Error;
use std::fs::{self, File};
use std::io::Read;
use std::collections::HashMap;
use std::path::Path;
use serde_json::Value;

use super::charts::{
    ConsensusComparison, 
    BenchmarkResult,
    load_consensus_data,
    visualize_consensus_time_comparison,
    visualize_energy_comparison,
    visualize_performance_benchmark,
    visualize_latency_comparison,
    visualize_quantum_metrics,
};

const DASHBOARD_DIR: &str = "dashboard";
const BENCHMARK_RESULTS_FILE: &str = "benchmark_results.json";
const CONSENSUS_COMPARISON_FILE: &str = "consensus_comparison.json";
const NETWORK_MONITORING_FILE: &str = "network_monitoring.json";

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –≤ –µ–¥–∏–Ω—É—é –ø–∞–Ω–µ–ª—å HTML
pub fn generate_dashboard() -> Result<String, Box<dyn Error>> {
    println!("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...");
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    let dashboard_path = Path::new(DASHBOARD_DIR);
    if !dashboard_path.exists() {
        fs::create_dir_all(dashboard_path)?;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞
    let benchmark_results = load_benchmark_results()?;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–≤
    let consensus_data = if Path::new(CONSENSUS_COMPARISON_FILE).exists() {
        Some(load_consensus_data(CONSENSUS_COMPARISON_FILE)?)
    } else {
        println!("–§–∞–π–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω");
        None
    };
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    let mut chart_paths = Vec::new();
    
    if !benchmark_results.is_empty() {
        chart_paths.push(visualize_performance_benchmark(&benchmark_results)?);
        chart_paths.push(visualize_latency_comparison(&benchmark_results)?);
        chart_paths.push(visualize_quantum_metrics(&benchmark_results)?);
    }
    
    if let Some(consensus_data) = consensus_data {
        chart_paths.push(visualize_consensus_time_comparison(&consensus_data)?);
        chart_paths.push(visualize_energy_comparison(&consensus_data)?);
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–Ω–¥–µ—Ä–æ–º –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
    let html_path = format!("{}/index.html", DASHBOARD_DIR);
    let html_content = generate_html_dashboard(&chart_paths, &benchmark_results);
    
    fs::write(&html_path, html_content)?;
    
    println!("‚úÖ –ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞: {}", html_path);
    Ok(html_path)
}

/// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
fn load_benchmark_results() -> Result<Vec<BenchmarkResult>, Box<dyn Error>> {
    if !Path::new(BENCHMARK_RESULTS_FILE).exists() {
        println!("–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö");
        return Ok(generate_sample_benchmark_results());
    }
    
    let mut file = File::open(BENCHMARK_RESULTS_FILE)?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;
    
    let data: Vec<BenchmarkResult> = serde_json::from_str(&contents)?;
    Ok(data)
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
fn generate_sample_benchmark_results() -> Vec<BenchmarkResult> {
    let node_counts = vec![5, 10, 20, 50, 100];
    let mut results = Vec::new();
    
    for &node_count in &node_counts {
        let scalability_factor = 0.95f64.powf((node_count as f64).log10());
        let base_tps = 1000.0;
        
        results.push(BenchmarkResult {
            node_count,
            qubits_per_node: 3,
            transaction_count: 1000,
            topology: "FullMesh".to_string(),
            
            total_time_ms: 1000.0 * node_count as f64 / base_tps * scalability_factor,
            transactions_per_second: base_tps * scalability_factor,
            avg_latency_ms: 5.0 + node_count as f64 * 0.2,
            max_latency_ms: 10.0 + node_count as f64 * 0.5,
            
            avg_entanglement: 0.9 - 0.005 * node_count as f64,
            avg_interference: 0.85 - 0.003 * node_count as f64,
            consensus_rate: 0.98 - 0.0005 * node_count as f64,
            
            memory_usage_mb: node_count as f64 * 5.0,
            relative_energy_consumption: 0.001 + node_count as f64 * 0.0001,
            estimated_large_scale_tps: base_tps * 0.8 * (100_000.0 / node_count as f64).powf(0.9),
        });
    }
    
    results
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fn generate_html_dashboard(chart_paths: &[String], results: &[BenchmarkResult]) -> String {
    let mut charts_html = String::new();
    
    for path in chart_paths {
        let filename = Path::new(path).file_name().unwrap().to_str().unwrap();
        charts_html.push_str(&format!(
            r#"<div class="chart-container">
                <img src="../{}" alt="{}" class="chart-image">
            </div>
            "#,
            path, filename
        ));
    }
    
    let mut metrics_html = String::new();
    if !results.is_empty() {
        // –ë–µ—Ä–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–∑–ª–æ–≤
        let max_node_result = results.iter()
            .max_by_key(|r| r.node_count)
            .unwrap();
        
        metrics_html = format!(
            r#"<div class="metrics-table">
                <h3>–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏</h3>
                <table>
                    <tr>
                        <th>–ú–µ—Ç—Ä–∏–∫–∞</th>
                        <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                    </tr>
                    <tr>
                        <td>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤</td>
                        <td>{}</td>
                    </tr>
                    <tr>
                        <td>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É (TPS)</td>
                        <td>{:.2}</td>
                    </tr>
                    <tr>
                        <td>–°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (–º—Å)</td>
                        <td>{:.2}</td>
                    </tr>
                    <tr>
                        <td>–ó–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å</td>
                        <td>{:.2}</td>
                    </tr>
                    <tr>
                        <td>–ö–æ–Ω—Å–µ–Ω—Å—É—Å</td>
                        <td>{:.1}%</td>
                    </tr>
                    <tr>
                        <td>–û—Ü–µ–Ω–∫–∞ TPS –¥–ª—è 100K —É–∑–ª–æ–≤</td>
                        <td>{:.2}</td>
                    </tr>
                </table>
            </div>"#,
            max_node_result.node_count,
            max_node_result.transactions_per_second,
            max_node_result.avg_latency_ms,
            max_node_result.avg_entanglement,
            max_node_result.consensus_rate * 100.0,
            max_node_result.estimated_large_scale_tps,
        );
    }
    
    format!(
        r#"<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TRIAD Network - –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f7fa;
            color: #333;
        }}
        header {{
            background: linear-gradient(135deg, #3a0ca3, #4361ee);
            color: white;
            padding: 20px;
            text-align: center;
        }}
        h1 {{
            margin: 0;
            font-size: 2.2em;
        }}
        .subtitle {{
            font-weight: 300;
            margin-top: 10px;
        }}
        .dashboard {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }}
        .dashboard-grid {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }}
        @media (max-width: 768px) {{
            .dashboard-grid {{
                grid-template-columns: 1fr;
            }}
        }}
        .chart-container {{
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 15px;
            margin-bottom: 20px;
        }}
        .chart-image {{
            width: 100%;
            height: auto;
            border-radius: 4px;
        }}
        .metrics-container {{
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
        }}
        .metrics-table {{
            width: 100%;
        }}
        .metrics-table table {{
            width: 100%;
            border-collapse: collapse;
        }}
        .metrics-table th, .metrics-table td {{
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }}
        .metrics-table th {{
            background-color: #f9f9f9;
        }}
        footer {{
            text-align: center;
            padding: 20px;
            margin-top: 20px;
            color: #666;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <header>
        <h1>TRIAD Network</h1>
        <div class="subtitle">–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –∫–≤–∞–Ω—Ç–æ–≤–æ-–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–µ—Ç–∏</div>
    </header>
    
    <div class="dashboard">
        <div class="metrics-container">
            {metrics_html}
        </div>
        
        <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∏–Ω–≥–∞</h2>
        <div class="dashboard-grid">
            {charts_html}
        </div>
    </div>
    
    <footer>
        <p>TRIAD Network ¬© 2023 - –ö–≤–∞–Ω—Ç–æ–≤–æ-–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–µ—Ç—å</p>
    </footer>
</body>
</html>"#
    )
}

/// –°–æ–∑–¥–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
pub fn create_visualizer_binary() -> Result<(), Box<dyn Error>> {
    // –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    // –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ
    Ok(())
} 